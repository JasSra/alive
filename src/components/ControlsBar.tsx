"use client";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faBug, faDownload, faTrash } from "@fortawesome/free-solid-svg-icons";
import Filters from "@/components/Filters";

export type Transport = "sse" | "ws";

interface ControlsBarProps {
  range: string;
  setRange: (r: string) => void;
  live: boolean;
  setLive: (v: boolean) => void;
  transport: Transport;
  setTransport: (t: Transport) => void;
  status: "idle" | "connecting" | "open" | "closed" | "error";
  showInternal: boolean;
  setShowInternal: (v: boolean) => void;
  onFetchRange?: () => void;
  onClear?: () => void;
  onDebug?: () => void;
  disableRangeActions?: boolean;
}

export default function ControlsBar({
  range,
  setRange,
  live,
  setLive,
  transport,
  setTransport,
  status,
  showInternal,
  setShowInternal,
  onFetchRange,
  onClear,
  onDebug,
  disableRangeActions,
}: ControlsBarProps) {
  return (
    <div className="col-span-12 flex flex-wrap items-center justify-between gap-2 mb-1">
      <div className="flex items-center gap-3">
        <Filters range={range} onRangeChange={setRange} />
      </div>
      <div className="flex items-center gap-2">
        <label className="text-xs text-neutral-400" title="Include events generated by our own ingestion endpoints (/api/events/track, /api/monitor)">Internal</label>
        <button 
          onClick={() => setShowInternal(!showInternal)} 
          className={`text-sm px-2 py-1 rounded-md border ${showInternal ? "bg-purple-500/20 border-purple-400 text-purple-200" : "border-neutral-700"}`}
          title={showInternal ? 'Showing internal ingestion events' : 'Hiding internal ingestion events'}
        >
          {showInternal ? 'On' : 'Off'}
        </button>
        <label className="text-xs text-neutral-400">Live</label>
        <button onClick={() => setLive(!live)} className={`text-sm px-2 py-1 rounded-md border ${live ? "bg-emerald-500/20 border-emerald-400 text-emerald-200" : "border-neutral-700"}`}>{live ? "On" : "Off"}</button>
        <label className="text-xs text-neutral-400">Transport</label>
        <select aria-label="Transport" value={transport} onChange={(e) => setTransport(e.target.value as Transport)} className="text-sm px-2 py-1 rounded-md border border-neutral-700 bg-neutral-900 text-white">
          <option value="sse">SSE</option>
          <option value="ws">WebSocket</option>
        </select>
        <span className={`text-xs px-2 py-1 rounded ${status === "open" ? "bg-emerald-500/20 text-emerald-200" : status === "connecting" ? "bg-amber-500/20 text-amber-200" : status === "error" ? "bg-rose-500/20 text-rose-200" : "bg-neutral-800 text-neutral-400"}`}>{status}</span>
        {onFetchRange && (
          <button 
            onClick={onFetchRange} 
            disabled={!!disableRangeActions}
            className={`text-sm px-3 py-2 rounded-md border border-neutral-700 inline-flex items-center gap-2 ${disableRangeActions ? 'bg-neutral-800 text-neutral-500 cursor-not-allowed' : 'bg-neutral-900 hover:bg-neutral-800'}`}
            aria-label="Fetch range"
          >
            <FontAwesomeIcon icon={faDownload} className="text-blue-400" />
            Fetch Range
          </button>
        )}
        {onClear && (
          <button 
            onClick={onClear} 
            disabled={!!disableRangeActions}
            className={`text-sm px-3 py-2 rounded-md border border-neutral-700 inline-flex items-center gap-2 ${disableRangeActions ? 'bg-neutral-800 text-neutral-500 cursor-not-allowed' : 'bg-neutral-900 hover:bg-neutral-800'}`}
            aria-label="Clear events"
          >
            <FontAwesomeIcon icon={faTrash} className="text-red-400" />
            Clear
          </button>
        )}
        {onDebug && (
          <button onClick={onDebug} className="text-sm px-3 py-2 rounded-md border border-neutral-700 bg-neutral-900 hover:bg-neutral-800 inline-flex items-center gap-2" aria-label="Debug info">
            <FontAwesomeIcon icon={faBug} className="text-yellow-400" />
            Debug
          </button>
        )}
      </div>
    </div>
  );
}
